<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Blogging about stuffs</description>
    <link>http://feeds.feedburner.com/Dhclavie//</link>
    <atom:link href="http://feeds.feedburner.com/Dhclavie//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 26 Oct 2014 00:39:12 +0800</pubDate>
    <lastBuildDate>Sun, 26 Oct 2014 00:39:12 +0800</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>大型网站架构基础</title>
        <description>&lt;pre&gt;&lt;code&gt;上周读了《大型网站技术架构》这本书，总体来说，里面很多重复的内容，而且讲的不够深入，很多都是简单介绍一下，大型网站架构也不是一开始就设置的多么高级，也是由于网站性能，可用性等满足不了当前的情况进而对站点架构进行升级，改正的过程，书里面讲到几个平时比较混淆的概念，这篇就作为读书比较记录下书中想过概念和技术。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;大型网站架构普遍的演变过程&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1.应用程序和DB在同一台服务器
2.应用程序和DB分离
3.应用程序和DB之间假如缓存层，可以为本地缓存或者为远程缓存（memcached，redis等）
4.使用lVS+应用程序集群替换单个应用程序改善网站的并发处理能力
5.数据库改造，数据库读写分离（主-从模式）
6.在LVS前面，增加反向代理和CDN加速网站响应速度
7.数据库改造，分库，分表，建立分布式数据库集群
8.应用程序集群升级为分布式服务
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;大型网站架构模式&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1.分层：网站分为应用层，服务层，数据层
2.分割：业务分割部署，功能分割为多个服务
3.分布式：
		&amp;lt;1&amp;gt;分布式应用和服务：应用和服务模块分布式部署
		&amp;lt;2&amp;gt;分布式静态资源，网站的css，js和图片进行独立部署
		&amp;lt;3&amp;gt;分布式数据和存储，数据分布式存储
		&amp;lt;4&amp;gt;分布式技术，hadoop和MapReduce进行批处理计算，分散计算
		&amp;lt;5&amp;gt;分布式配置和锁，zookeeper
4.集群：无状态服务集群部署
5.缓存，加快处理速度，例如，CDN，反向代理，本地缓存，分布式缓存
6.异步，加快响应，消除并发高峰
7.冗余，冷备份和热备份
8.自动化，部署自动化
9.安全，防XSS和SQL注入
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;软件架构关注的几个要素：性能，可用性，伸缩性，扩展性，安全性。&lt;/h4&gt;

&lt;h4 id=&quot;section-3&quot;&gt;性能&lt;/h4&gt;
&lt;p&gt;主要使用响应速度作为指标，可以使用页面压缩，合理页面布局，减少COOKIE传输，CDN，反向代理，缓存，SQL优化，索引，读写分离，集群，异步等手段进行各层次优化。&lt;/p&gt;

&lt;p&gt;Web前端优化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.减少http请求数量（压缩js，css，和图片合并）
2.浏览器缓存
3.启用压缩，服务器对文件进行压缩
4.css放页面head，js放body里面
5.减少cookies传输
6.CDN加速
7.反向代理
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后端服务器优化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.分布式缓存，memcache，redis
2.代码异步，无状态
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-4&quot;&gt;可用性&lt;/h4&gt;
&lt;p&gt;主要使用可用时间作为指标，可以使用热备份，主从DB，无状态应用集群部署等手段提高。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;伸缩性&lt;/h4&gt;
&lt;p&gt;衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器，加入新的服务器后，是否可以提供和原来服务器无差别的服务，集群中可容纳的总的服务器数量是否有限制。
应用服务器集群，尽量让服务无状态以通过LVS不断加入服务器
缓存服务器集群，加入新的服务器会领缓存失效，使用一致性hash最大限度减少失效的节点（虚拟节点）&lt;/p&gt;

&lt;p&gt;伸缩性设计&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.http重定向负载均衡
2.DNS域名解析负载均衡
3.方向代理
4.IP负载均衡
5.数据链路负载均衡（lvs）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-6&quot;&gt;扩展性&lt;/h4&gt;
&lt;p&gt;衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现在产品透明无影响，不需要修改或者修改很少业务功能就可以上线新产品，不同产品之间尽量减少耦合，主要手段是使用事件驱动架构和分布式服务。&lt;/p&gt;

&lt;p&gt;利用分布式消息队列降低系统耦合性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.事件驱动架构（libevent，node等）
1.分布式消息队列（rabbitmq等）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-7&quot;&gt;安全性&lt;/h4&gt;
&lt;p&gt;是否能保护网站重要数据不被窃取。&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 08:37:33 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/web_server_architecture</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/web_server_architecture</guid>
        
        
        <category>post</category>
        
        <category>web</category>
        
        <category>architecture</category>
        
      </item>
    
      <item>
        <title>Rework2 - office not required (重来2)</title>
        <description>&lt;p&gt;最近看rework - office not required 这本书，里面介绍了几个远程工作的工具和建议&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.远程工作相互重叠的时间，37signals建议4小时。：）
2.屏幕共享软件：
	MAC中的quicktime player 屏幕录制
	www.join.me
	http://www.gotomeeting.com/
	http://www.webex.com/

3.资料共享
	dropbox，github，共享日历，共享工作任务todo list
	http://www.salesforce.com/ 或者 https://highrisehq.com/ 跟进销售
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无论是否远程工作，在每天结束之后，问问自己，今天有木有好好工作？这个问题可以让你内心得到解脱，如果你迅速地答出，是的，你就可以心满意足地停下来，就算这项工作木有完成，这也许就是一种心里暗示，我有时候也会感受到，确定是有效果的。&lt;/p&gt;

&lt;p&gt;高效获取市场的几个策略&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.在销售阶段，要让潜在客户很早就知道你们不在同一个地方，信任需要在一开始的时候就建立起来。
2.在客户开口索要你的背景资料之前，就主动给他们，一上来就让客户知道，你没什么隐瞒的。
3.经常把工作进度拿给他们看，客户会焦虑，而这是减轻焦虑的好方法。
4.让客户很容易就找到你，既然你们没法面对面，那你最好迅速地回电话，邮件和即时信息。
5.要让客户参与进来，及时掌握进度，让客户感受到，这也是他们的项目。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了顺利地实现远程工作，你的写作能力和沟通能力一定要过硬，熟练掌握英文是关键。&lt;/p&gt;

&lt;p&gt;优秀的远程员工就是优秀的员工。&lt;/p&gt;

&lt;p&gt;把一天分成几个阶段，阅读最新的资讯，协作，专心工作，处理邮件，查看行业新闻等。&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Oct 2014 09:28:33 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/rework2_remoting_work</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/rework2_remoting_work</guid>
        
        
        <category>post</category>
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>一致性Hash</title>
        <description>&lt;pre&gt;&lt;code&gt;去年工作的时候听大智慧的架构师的演讲，第一次听到一致性hash这个名词，当时没听明白，
后面工作没联系到这个东西，后来也没去追查了，但了今年，听存储的同事的演讲，
也听到这个名词，然后就有了这篇文章。
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;背景&lt;/h4&gt;

&lt;p&gt;一般的分布式缓存系统是这样设计的，有好几台内存比较大的服务器作为缓存服务器，
假如3台，node1，node2，node3，业务程序需要把频繁访问的热点数据存储在
缓存服务器中以减少对下层DB的压力，这时，假如写数据（“test”，”{a:1,b:2}”）
, 缓存系统内部的过程是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.向缓存系统的路由组件根据hash算法，算出key（也就是text）的hash值，
然后用这个hash值余3的出一台缓存服务器，假如这里得到node2
2.缓存系统将这个路由信息记录下来，以便下次访问
3.返回给业务程序node2这个节点的信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，业务程序就把这个数据往node2这个节点写（至于用什么协议，可以自定，
假如Memcached，redis等），下次需要读取数据的时候，读操作过程简单可以认为是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.根据key从缓存系统的路由组件获取这个key对应的node节点信息
2.返回给业务程序
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以马上知道是node2这个节点，立刻进行读操作，无需再访问DB，起到加速的作用。
但后面业务发展迅猛，需要增加了1台缓存服务器，这时，缓存服务器的数量就变成4了，
路由计算也需要使用4昨晚被除数重算计算hasn值，这样前面三台缓存服务器的路由信息就
起不到原来的左右，所有数据都会走到DB去访问并重新缓存，起不到原来需要的效果。&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;那有什么方法可以处理尼？&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;本质上就是需要在新增服务器的时候尽量减少对已上线服务器的影响，也就是尽量
减少路由信息失效的范围
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;hashconsistent-hashing&quot;&gt;一致性hash（Consistent hashing）&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;答案就是引入一致性hash算法来做路由计算，先构造一个0-2的32次方的环，然后
将缓存服务器id（假如cache A）根据hash算出一个数值，这个数值也是0-2的32次方
的范围，并投射在这个环上，类似，cache B 和cache C同样用这个方式投射到这个大环
上面，当业务程序需要把写缓存数据时，讲key进行hash得到一个0到2的32次方之间的
hash值（key 1），并投射到这个环上面，然后顺时针找到cache A，因此就返回cache A
的信息，这样的做法的好处时，下次有新服务器加入时，例如cache D，计算得出的hash值
投放到cache A 和 cache B直接，那么原来在cache A到cache b直接的某一部分
（cache A到cache D的这部分）路由信息会失效，而其他的别的路由信息都可以继续
正常使用，但这样由于新增的服务器减低了cache B的负载（一部分负载都到cache D了），
而cache A和cache C的负载还是很高，这样所有服务器的负载就很不平衡，因此我们采取
下面的方式进一步优化这个方案。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://feeds.feedburner.com/Dhclavie/images/Consistent_hashing.jpg&quot; alt=&quot;Consistent_hashing&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;虚拟节点&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;上面提到的不足的主要原因是因为节点数量在比较少的情况下才会发生的，因此下面的
解决方案是增加缓存服务器的节点数量，但服务器非常昂贵，增加是非常有限的，因此
现在的方案是把一个物理节点虚拟为多个虚拟节点，如下图，新增服务器时，都按照这样
的方式，把虚拟节点映射到hash环上面去，这样hash key的值分布就会比较均很到散落
在这些物理服务器上面去。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://feeds.feedburner.com/Dhclavie/images/Consistent_hashing_virtual_node.png&quot; alt=&quot;Consistent_hashing&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Oct 2014 08:40:33 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/consistent_hashing</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/consistent_hashing</guid>
        
        
        <category>post</category>
        
        <category>consistenthashing</category>
        
        <category>cache</category>
        
      </item>
    
      <item>
        <title>Apple Swift Language Base</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;1.变量和常量&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;let定义常量，var定义变量	
赋值市会隐含定义类型，swift不会隐含修改变量的类型，需要修改，必须明确指定。
字符串拼接使用加号（+），或者直接在字符串字面量前面使用\() 
创建数组或者字典使用[]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-1&quot;&gt;2.控制流&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;条件控制 if switch， switch 里面的case无需明确break，默认会break，但必须有default
循环使用for, for in , while , do while
使用..&amp;lt; 或者...在循环中指定一个范围，后者为包括
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;3.函数和闭包&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;函数使用func定义，可以返回多个值，函数调用使用括号，参数必须指定类型
func(a:Int  , b:Int ) -&amp;gt; String {} 接受2个int类型，返回一个字符串
函数参数可以为可变参数，在类型后面加...
函数体可以继续定义函数
在swift，函数本质上是一个简单的闭包
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-3&quot;&gt;4.对象和类&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class 后面接类名定义类
使用类名+括号创建对象，调用对象方法使用.操作符
构成函数使用init定义
析构函数使用deinit定义
在类函数里使用self访问对象成员
继承使用:
重写子类方法使用override指定
属性可以具有set，get方法，set方法默认传递的参数名称为newValue，可以修改，在set后面加括号指明参数名称即可，无	需指定类型
可以给属性添加willSet和didSet指定赋值前或者赋值后的逻辑
可以配合？指定选项变量，当对象为nil时，语句后面的操作不会执行
选项变量为在变量类型前面加？，定义为选项变量，后面引用都比较有？号
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-4&quot;&gt;5.结构和枚举类型&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;enum定义枚举类型，可以为enum类型提高函数，但这里的枚举类型不需要值，c/c++中的枚举类型本质为unsigned，
但这里的枚举类型为一个名称，我想应该是一种对象吧。可以在里面定义方法，并进行访问，而且枚举类型和类不一样，
不需要实例化。

struct定义结构，结构可以定义构造函数和方法，属性，但和类不一样的是结构使用值传递，类使用引用传递，这个
和传统语言类似
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;protocolsextensions&quot;&gt;6.协议和扩展（protocols，extensions）&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;使用protocol定义一个协议,协议里面的只可以写方法声明或者属性声明，不能写body
mutating func定义个协议方法，也就是定义一个接口吧，继承者必须实现。	使用extension扩展一个存在的类型
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;generics&quot;&gt;7.Generics（怎么叫？应该是模板吧）&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;使用&amp;lt;&amp;gt;指定类型，具体使用case by case
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 19 Oct 2014 08:53:20 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/apple_swift_language_base</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/apple_swift_language_base</guid>
        
        
        <category>post</category>
        
        <category>swift</category>
        
        <category>apple</category>
        
      </item>
    
      <item>
        <title>Base Javascript</title>
        <description>&lt;p&gt;1.访问一个不存在的变量或者没有赋值的变量，得到undefined&lt;/p&gt;

&lt;p&gt;2.null变量不是undefined，这个变量有值，是一个特殊的object，值为为null&lt;/p&gt;

&lt;p&gt;3.任何不属于number，string，boolean，undefined，null的都为对象object（function也为对象）&lt;/p&gt;

&lt;p&gt;4.typeof 操作可以返回变量的类型,用字符串表示，如“string”&lt;/p&gt;

&lt;p&gt;5.NaN is a special value that is also a number，Nan也是一个数值&lt;/p&gt;

&lt;p&gt;6.下面的情况导致false&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The empty string “”&lt;/li&gt;
  &lt;li&gt;null&lt;/li&gt;
  &lt;li&gt;undefined&lt;/li&gt;
  &lt;li&gt;The number 0&lt;/li&gt;
  &lt;li&gt;The number NaN&lt;/li&gt;
  &lt;li&gt;The Boolean false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.函数没有明确返回值，默认返回undefined&lt;/p&gt;

&lt;p&gt;8.函数里面包含一个默认的数组arguments（其实是一个object）包含所有的参数&lt;/p&gt;

&lt;p&gt;9.if内定义的变量外层可以访问，函数内定义的变量外层不能访问&lt;/p&gt;

&lt;p&gt;10.Variable hoisting, 函数内定义的和外层变量同名的变量，定义会被提升到函数开始，因此，一进入函数内，和函数内部同名的外部变量瞬间被秒杀。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;When your JavaScript program execution enters a new function, 
all the variables declared anywhere in the function are 
moved (or elevated, or hoisted) to the top of the function. 
This is an important concept to keep in mind. Further, 
only the declaration is hoisted, meaning only the presence of 
the variable is moved to the top. Any assignments stay where they are.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;    	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;      	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;      	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;变成:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;    	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;      	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// same as: var a = undefined;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;      	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;      	&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;      	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;11.即刻执行的函数不能被执行第二次！！！&lt;/p&gt;

&lt;p&gt;12.函数可以被作为参数转递&lt;/p&gt;

&lt;p&gt;13.闭包说白了就是将变量作用域的范围进行扩大&lt;/p&gt;

&lt;p&gt;14.给对象设置属性时，属性的名字可以为下面形式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;occupation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;    	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;occupation&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;    	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;occupation&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;15.在javascript中如果你想使用类似hash的数据结构，那么可以使用object&lt;/p&gt;

&lt;p&gt;16.创建“new 函数名称”的形式可以创建一个对象，并且会调用这个函数，而这个函数也就成为了这个对象的构造函数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance_dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;keke&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;17.每个object实例都有一个constructor属性，指向这个实例的构造函数&lt;/p&gt;

&lt;p&gt;18.函数有一个length属性指出期望的参数个数（也就是参数列表的个数）&lt;/p&gt;

&lt;p&gt;19.每个函数都有一个prototype属性，这个属性指向一个对象，每个从这个函数构造出来的对象都继续了这个prototype所指向的对象的属性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;All objects created with this function keep a reference 
to the prototype property and can use its properties as their own
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;20.function对象的call和apply方法可以用别的对象作为调用实例进行使用，也就是可以使用别的实例作为内部的this引用进行使用，功能一样，但传递的参数不一样。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;These methods also allow your objects to &quot;borrow&quot; methods 
from other objects and invoke them as their own. 
This is an easy and powerful way to reuse code.

some_obj.someMethod.apply(my_obj, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);
   	some_obj.someMethod.call(my_obj, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;21.当对象是new 函数的方式构造出来的，prototype上面的属性才会依附到this上面，单纯使用函数调用，prototype上面的属性不会依附到this对象，因此，通过在prototype上面添加属性的方式，可以给实例进行属性添加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Adding methods and properties to the prototype property 
of the constructor function is another way to add functionality 
to the objects this constructor produces.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;22.属性查找时是按照prototype链往上查找。&lt;/p&gt;

&lt;p&gt;23.prototype依附的属性会在new操作之后拷贝到对象上面，对对象属性的修改不会影响到prototype上面的属性。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Oct 2014 07:40:33 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/Javascript-base</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/Javascript-base</guid>
        
        
        <category>post</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Node Module</title>
        <description>&lt;p&gt;这篇文章介绍如何编写Node模块，node模块遵循commonjs标准，实现起来非常简单，下面简单实现一个maths的模块, 在macosx下编写。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim maths.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在maths.js里面写入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exports.add = function(a, b) {
	return a+b;
}
exports.sub = function(a, b) {
	return a-b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意到代码里面使用了exports导出两个函数，在node里面使用exports或者module.exports导出模块里面的功能，现在，已经完成了maths模块，下面试着使用下这个模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在相同目录下创建app.js，然后写入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var maths = require(&quot;/maths.js&quot;);
console.log(maths(1,2));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;3 但注意到我们引入这个模块的形式指明了路径，如何才可以使用npm安装我们自己编写的模块？现在，我们创建一个maths的目录：

mkdir maths
cd maths
mv ../maths.js index.js
vim package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在package.json里面写入下面参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  		&quot;name&quot;: &quot;maths&quot;,
  		&quot;version&quot;: &quot;0.0.1&quot;,
  		&quot;private&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意version参数必须是三位的，之前我使用了2位的，模块没有包装成功，最后创建README.md文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo maths function add and sub! &amp;gt; README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，我们使用下面命令包装模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~/Project/maths/ npm pack
	maths-0.0.1.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模块已经打包完成，下面试着用npm安装这个模块到我们的项目里面（下面创建一个项目目录，进行模块安装）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir modtest
cd modtest
npm install ~/Project/maths/maths-0.0.1.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在模块已经安装到我们的项目里面，可以查看一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~/Project/modtest/ npm install ~/Project/maths/maths-0.0.1.tgz
	maths@0.0.1 node_modules/maths
 ~/Project/modtest/ ls
	node_modules
 ~/Project/modtest/ ls node_modules
	maths
 ~/Project/modtest/ ls node_modules/maths
	README.md    index.js     package.json
 ~/Project/modtest/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们试着来使用这个模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;写入下面代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var maths = require(&quot;maths&quot;);
console.log(maths.add(1,2));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~/Project/modtest/ node app.js
	3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单的一个模块完成拉 ：），但看见很多别的人模块里面导出功能是使用module.exports的，我们这里使用了exports，到底这两个有什么差别？看下面的例子,编辑文件test.js：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = &quot;xxxxxxxx&quot;;
exports.add = function(){
	console.log(&quot;add&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用这个文件时：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = &quot;xxxxxxxx&quot;;
exports.add = function(){
      console.log(&quot;add&quot;);
}
                    
 ~/Project/modtest/ node app.js
	xxxxxxxx
	/Users/apple/Project/modtest/app.js:4
	test.add();
 		 ^
	TypeError: Object xxxxxxxx has no method &#39;add&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出的test对象为一个string，没有add方法，再看下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports.name = &quot;xxxxxxxx&quot;;
exports.add = function(){
	console.log(&quot;add&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引入这个文件时：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var test = require(&quot;./test.js&quot;);
console.log(test.name);
test.add();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~/Project/modtest/ node app.js
xxxxxxxx
add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此，我们可以得知，最终导出的是modul.exports上面的对象，attach在exports上面的对象最终会被attach到modul.exports上面，但前提是module.exports是一个对象。&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Sep 2014 19:09:08 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/node-module</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/node-module</guid>
        
        
        <category>post</category>
        
        <category>node</category>
        
        <category>module</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Git Base</title>
        <description>&lt;h4 id=&quot;gitgit&quot;&gt;假设你已经安装了git，下面是一下git的基本配置和操作，每次做一个项目都网上找一遍，这次写在这里，下次不用找了:)&lt;/h4&gt;

&lt;h5 id=&quot;section&quot;&gt;初始化一个项目&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-1&quot;&gt;设置提交和修改的作者信息&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &quot;John Doe&quot;
git config --global user.email &quot;John@xxx.com&quot;
其中--global 可以设置为--system, --global or --file，范围影响为从整个系统，当前账户，和当前项目
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;logstatus&quot;&gt;设置log和status的颜色高亮&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;commit&quot;&gt;设置commit时使用的编辑器&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git config --global core.editor vim 
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-2&quot;&gt;设置解决合并冲突时使用哪种差异分析工具&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git config --global merge.tool vimdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-3&quot;&gt;设置命令别名，修改为个人喜好，&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git config --global alias.co checkout
git config --global alias.cm commit
git config --global alias.st status
git config --global alias.br branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-4&quot;&gt;查看配置信息&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;git-&quot;&gt;将文件添加到git 库&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git add
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;commit-1&quot;&gt;添加commit&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git commit
git commit -am &quot;comm内容&quot; 添加文件和commit一并完成
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-5&quot;&gt;创建分支&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git branch branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-6&quot;&gt;切换分支&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git checkout branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-7&quot;&gt;将当前项目和一个远程库关联&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://xxxxxx/xxxx.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;section-8&quot;&gt;讲一个本地分支和一个远程库关联&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;git push -u origin branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;gitignore&quot;&gt;创建.gitignore文件屏蔽不需要管理的文件或者自动生成的文件&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;例如：下面为忽略所有so和o文件
	*.so
	*.o
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Thu, 25 Sep 2014 19:30:23 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/git-base</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/git-base</guid>
        
        
        <category>post</category>
        
        <category>base</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Mysql设置Master和Slave同步</title>
        <description>&lt;h4 id=&quot;mysql&quot;&gt;工作2年都没有自己做过mysql的主从配置，平时使用的比较多，今天有个服务要用到，就写来记录下，下面的操作基于这个环境：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Centos 7
Mysql Ver 14.14 Distrib 5.1.73
Master IP 假设为 10.10.10.1
Slave IP 假设为 10.10.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;master&quot;&gt;配置Master&lt;/h3&gt;
&lt;p&gt;#### 1.打开mysql的配置文件
	vim /etc/mysql.my.conf&lt;/p&gt;

&lt;h4 id=&quot;mysqld&quot;&gt;2.设置绑定地址，这个参数在[mysqld]下面&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;bind-address=10.10.10.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dbidslave&quot;&gt;3.修改db服务ID，待会也需要设置slave的，必须和这里的不一样&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sever-id = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;binlog&quot;&gt;4.设置binlog文件的位置&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;log_bin = /var/log/mysql/mysql-bin.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dbbinlog&quot;&gt;5.设置那个db要记录binlog&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;binlog_do_db = db_to_replication
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mysqld-1&quot;&gt;6.重启mysqld&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;service mysqld restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mysqlslaveslaveroot123&quot;&gt;7.登陆mysql,设置slave访问的权限,slave的账户也使用root,密码为123（假设）&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;GRANT REPLICATION SLAVE ON *.* TO &#39;root&#39;@&#39;10.10.10.2&#39; IDENTIFIED BY &#39;123&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section&quot;&gt;8.进去要同步的库&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;use db_to_replication;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dbtoreplication&quot;&gt;9.锁定db_to_replication，以免有数据进入，如果当前没有服务接入可以跳过这步。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;FLUSH TABLES WITH READ LOCK;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mastermysqlmariadbmysql----positionfilefilebinlogpostitonslave&quot;&gt;10.查看Master的状态（注意，mysql新版本都叫mariadb，mysql被卖了 - -!)，记录position和file，等下会用到，其实这里的file为binlog文件，postiton为slave要开始执行同步的位置。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db_to_replication]&amp;gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000002 | 1234     | db_to_replication|              |
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;masterslave&quot;&gt;11.导出Master要同步的库，等下Slave需要用到。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;mysqldump -u root -p --opt db_to_replication &amp;gt; db_to_replication.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dbtoreplication8&quot;&gt;12.恢复db_to_replication，如果刚才没有执行第8步，那这里就不需要恢复了&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;UNLOCK TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;master-1&quot;&gt;13.退出，Master配置完成。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;quit
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;slave&quot;&gt;设置Slave&lt;/h3&gt;
&lt;p&gt;#### 1.创建db_to_replication库
	create database db_to_replication;&lt;/p&gt;

&lt;h4 id=&quot;masterdbtoreplication&quot;&gt;2.导入上面在Master导出的db_to_replication库&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;mysql -u root -p db_to_replication &amp;lt; /path/to/db_to_replication.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mysql-1&quot;&gt;3.打开mysql的配置文件&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/mysql.my.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dbidmaster&quot;&gt;4.修改db服务ID,要和Master不一样&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sever-id = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;binlog-1&quot;&gt;5.binlog的日志的位置&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;relay-log = /var/log/mysql/mysql-relay-bin.log
log_bin = /var/log/mysql/mysql-bin.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dbbinlog-1&quot;&gt;6.设置那个db要记录binlog&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;binlog_do_db = db_to_replication
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;relay&quot;&gt;7.relay相关文件位置&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;relay_log = /var/lib/mysql/mysql-relay-bin
relay-log-index = /var/lib/mysql/relay-bin.index
relay-log-info-file = /var/lib/mysql/relay-bin.info
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mysql-2&quot;&gt;8.重启mysql服务&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;service mysqld restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;mysqlmasterbinlogroot456logmaster10&quot;&gt;9.进入mysql，设置Master的信息,假设发送binlog的用户为root，密码为456，log文件名和开始同步的位置为设置Master中第10步记录的。&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;CHANGE MASTER TO MASTER_HOST=&#39;10.10.10.1&#39;,MASTER_USER=&#39;root&#39;,
MASTER_PASSWORD=&#39;456&#39;,MASTER_LOG_FILE=&#39;mysql-bin.000002&#39;, MASTER_LOG_POS=1234;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;slave-1&quot;&gt;10.开启Slave&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;START SLAVE;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;masterslave-1&quot;&gt;现在往Master插入一条数据就会发生同步到Slave，其他修改也是。&lt;/h3&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 07:46:33 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/mysql-master-slave</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/mysql-master-slave</guid>
        
        
        <category>post</category>
        
        <category>mysql</category>
        
        <category>master</category>
        
        <category>slave</category>
        
        <category>replication</category>
        
      </item>
    
      <item>
        <title>Base CSS</title>
        <description>&lt;h4 id=&quot;css&quot;&gt;引入CSS的形式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;行内式，直接在标记的style属性里面设置css样式&lt;/li&gt;
  &lt;li&gt;嵌入式，在head标签内写css代码&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;链接式&lt;/p&gt;

    &lt;link href=&quot;xxxx&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;导入式&lt;/p&gt;

    &lt;style type=&quot;text/css&quot;&gt;
      @import &quot;mystlcs.css&quot;
  &lt;/style&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;css-1&quot;&gt;基本CSS选择器&lt;/h4&gt;

&lt;p&gt;所有HTML的标记样式都通过不同的CSS选择器进行控制。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标记选择器：试用html标签来设置样式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;类别选择器&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;xxxxx&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ID选择器&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;xxxxxxx&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section&quot;&gt;复合选择器&lt;/h4&gt;

&lt;p&gt;复合选择器就是两个或者以上的基本选择器通过不同的方式组合在一起。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;交集选择器：由两个选择器直接连接构成，其结果是选中二者各自元素范围的交集。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;xxxx&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;并集选择器：选中多个选择器所选择的范围的组合，通过逗号连接。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;xxxxxxx&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;后代选择器：对内层元素进行设置样式，外层标记写在前面，内层标记写在后面，使用空格分隔。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ddddddd&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;css-2&quot;&gt;CSS的层叠特性&lt;/h4&gt;

&lt;p&gt;优先级：行内样式 &amp;gt; ID选择器 &amp;gt; 类别选择器 &amp;gt; 标记选择器&lt;/p&gt;

&lt;h4 id=&quot;css-3&quot;&gt;CSS盒子模型&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;一个孤立的盒子的内部结构&lt;/li&gt;
  &lt;li&gt;多个盒子之间的相互关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;盒子模型 ＝ connent内容 + border边框 + padding内边距 + margin外边距&lt;/p&gt;

&lt;p&gt;计算元素的宽和高时，要讲border纳入。&lt;/p&gt;

&lt;h4 id=&quot;cssfloatposititon&quot;&gt;CSS属性float和posititon&lt;/h4&gt;

&lt;p&gt;浮动float：默认为none，如果设置为非none，则盒子脱离标准流。&lt;/p&gt;

&lt;p&gt;Postition，默认值为static，按照盒子标准流&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;relative（相对定位），仍在标准流中，相对于原来所在标准流中的位置，进行一定偏移。&lt;/li&gt;
  &lt;li&gt;absolute（绝对定位），不在标准流中，以最近的已经定位的祖先元素进行定位。&lt;/li&gt;
  &lt;li&gt;fixed（固定定位），不在标准流中，以浏览器窗口进行定位。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;z-index&quot;&gt;z-index空间位置&lt;/h4&gt;

&lt;p&gt;当被设置了position属性时这个属性才有意义。&lt;/p&gt;

&lt;h4 id=&quot;display&quot;&gt;display属性&lt;/h4&gt;

&lt;p&gt;修改盒子的类型为块block，行inline或者把盒子隐藏none&lt;/p&gt;

&lt;h4 id=&quot;css3&quot;&gt;CSS布局技术的3个基本概念：定位，浮动和外边距操纵&lt;/h4&gt;

</description>
        <pubDate>Mon, 15 Sep 2014 00:46:33 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/css-base</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/css-base</guid>
        
        
        <category>post</category>
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 18:18:00 +0800</pubDate>
        <link>http://feeds.feedburner.com/Dhclavie//blog/welcome-to-jekyll</link>
        <guid isPermaLink="true">http://feeds.feedburner.com/Dhclavie//blog/welcome-to-jekyll</guid>
        
        
        <category>thriller</category>
        
        <category>comedy</category>
        
        <category>horror</category>
        
      </item>
    
  </channel>
</rss>
